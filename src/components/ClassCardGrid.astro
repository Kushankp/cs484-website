---
import { Card, CardGrid } from "@astrojs/starlight/components";
import { localizeTime, formatTime } from "../utils";
import { getCollection } from "astro:content";

// Fetching lectures, exams, and assignments statically (as before)
const lectures = (await getCollection("docs", (entry) => entry.id.startsWith("lecture"))).map(entry => {
  const date = localizeTime(entry.data.date);
  console.log("Lecture Date:", date); // Log each lecture date
  return {
    slug: entry.slug,
    type: "lecture",
    title: entry.data.title,
    date,  // Use the parsed Date object
    readings: entry.data.readings,
    notes: entry.data.notes,
  };
});

const exams = (await getCollection("exams")).map(entry => {
  const date = localizeTime(entry.data.date);
  console.log("Exam Date:", date); // Log each exam date
  return {
    type: "exam",
    title: entry.data.title,
    date,  // Use the parsed Date object
    content: entry.data.content,
    notes: entry.data.notes,
  };
});

const assignments = (await getCollection("docs", (entry) => entry.id.startsWith("homework"))).flatMap(entry => {
  const releaseDate = localizeTime(entry.data.release);
  const dueDate = localizeTime(entry.data.due);
  console.log("Assignment Release Date:", releaseDate); // Log each assignment release date
  console.log("Assignment Due Date:", dueDate); // Log each assignment due date
  return [
    {
      slug: entry.slug,
      type: "homework release",
      title: entry.data.title,
      description: entry.data.description,
      release: releaseDate,  // Use the parsed Date object
      due: dueDate,  // Use the parsed Date object
      notes: entry.data.notes,
    },
  ];
});

// Static sorting of upcoming events based on the current date
const currentDate = new Date();  // Capture the current date once

// Use direct comparison of Date objects
const upcomingLectures = lectures.filter(lecture => new Date(lecture.date) > currentDate)
                                 .sort((a, b) => new Date(a.date) - new Date(b.date));
console.log("Filtered Upcoming Lectures:", upcomingLectures); // Debugging output

const upcomingAssignments = assignments.filter(assignment => new Date(assignment.due) > currentDate)
                                       .sort((a, b) => new Date(a.due) - new Date(b.due));
console.log("Filtered Upcoming Assignments:", upcomingAssignments); // Debugging output

const upcomingExams = exams.filter(exam => new Date(exam.date) > currentDate)
                           .sort((a, b) => new Date(a.date) - new Date(b.date));
console.log("Filtered Upcoming Exams:", upcomingExams); // Debugging output
---

<CardGrid>
  <!-- Lecture card -->
  <Card title="Upcoming Lecture" icon="pencil">
    <div class="lecture-item" data-date={upcomingLectures[0]?.date}>
      {upcomingLectures.length > 0 ? (
        <>
          The next lecture will cover: {upcomingLectures[0].title}.
          <div>Date: {formatTime(upcomingLectures[0].date)}</div>
          <div>
            <strong>Readings:</strong>
            <ul>
              {upcomingLectures[0].readings.map(reading => (
                <li key={reading.link}>
                  <a href={reading.link} target="_blank" rel="noopener noreferrer">
                    {reading.name}
                  </a>
                  {reading.optional && " (Optional)"}
                </li>
              ))}
            </ul>
          </div>
        </>
      ) : (
        "There are no upcoming lectures."
      )}
    </div>
  </Card>

  <!-- Assignment card -->
  <Card title="Upcoming Assignment" icon="laptop">
    <div class="assignment-item" data-date={upcomingAssignments[0]?.due}>
      {upcomingAssignments.length > 0 ? (
        <>
          <strong>Title:</strong> {upcomingAssignments[0].title}
          <br />
          <strong>Description:</strong> {upcomingAssignments[0].description}
          <br />
          <strong>Release Date:</strong> {formatTime(upcomingAssignments[0].release)}
          <br />
          <strong>Due Date:</strong> {formatTime(upcomingAssignments[0].due)}
          <br />
          Ensure that you submit via Gradescope before the deadline.
        </>
      ) : (
        "No assignments are due soon."
      )}
    </div>
  </Card>

  <!-- Exam card -->
  <Card title="Upcoming Exam" icon="open-book">
    <div class="exam-item" data-date={upcomingExams[0]?.date}>
      {upcomingExams.length > 0 ? (
        <>
          The next exam is on: {formatTime(upcomingExams[0].date)}. Topics will include: {upcomingExams[0].content}.
        </>
      ) : (
        "No upcoming exams scheduled."
      )}
    </div>
  </Card>

  <Card title="Explore Lecture Content" icon="document">
    Take a look at the lecture notes, slides, and course videos.
  </Card>
</CardGrid>

<!-- Client-side script to filter past events and update content dynamically -->
<script>
  document.addEventListener('DOMContentLoaded', () => {
    console.log('Client-side script running'); // Debugging log
    const currentDate = new Date();

    // Helper function to update upcoming items
    const updateUpcomingItems = (selector, message, filterFn) => {
      const elements = document.querySelectorAll(selector);
      const upcomingItems = Array.from(elements).filter(filterFn);
      
      console.log(`Upcoming Items for ${selector}:`, upcomingItems); // Log upcoming items
      
      if (upcomingItems.length === 0) {
        // Show message if no upcoming items
        elements[0].innerHTML = message;
      } else {
        // Only display the first upcoming item
        elements.forEach((item, index) => {
          if (index > 0) item.style.display = 'none'; // Hide other items
        });
      }
    };

    // Filter and show only upcoming lectures
    updateUpcomingItems('.lecture-item', 'There are no upcoming lectures.', (lecture) => {
      const lectureDate = new Date(lecture.dataset.date);
      return lectureDate >= currentDate;
    });

    // Filter and show only upcoming assignments
    updateUpcomingItems('.assignment-item', 'No assignments are due soon.', (assignment) => {
      const assignmentDate = new Date(assignment.dataset.date);
      return assignmentDate >= currentDate;
    });

    // Filter and show only upcoming exams
    updateUpcomingItems('.exam-item', 'No upcoming exams scheduled.', (exam) => {
      const examDate = new Date(exam.dataset.date);
      return examDate >= currentDate;
    });
  });
</script>

